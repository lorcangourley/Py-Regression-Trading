import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# GridSearchCV for Hyperparameters

# 1. File Import
file = pd.read_csv(r'C:\Users\grabc\Documents\Lorcan\portfolio\Tesla StocksV3.csv')
print(file.head(2))

# 2. File Copy and Date Formatting
file_cleaned = file.copy()
file_cleaned["Tesla"] = file_cleaned["Close"]
file_cleaned["Date"] = file_cleaned["Date"].str.replace(' 16:00:00', '')
file_cleaned["Date"] = file_cleaned["Date"].str.replace(' 13:00:00', '')
file_cleaned["Date"] = file_cleaned["Date"].str.replace(' 13:05:00', '')
file_cleaned["Date"] = pd.to_datetime(file_cleaned["Date"], format='%d/%m/%Y')

# 3. Create Lag Features
file_cleaned['High.Lag'] = file_cleaned['High'].shift(1)
file_cleaned['Low.Lag'] = file_cleaned['Low'].shift(1)

my_file = file_cleaned[["Date", "Tesla", "High.Lag", "Low.Lag"]].sort_values('Date', ascending=True)
print(my_file.head(3))

# 4. Asset Momentum (Moving Averages)
my_file['2MA'] = my_file['Tesla'].rolling(window=2).mean()
my_file['5MA'] = my_file['Tesla'].rolling(window=5).mean()
my_file['14MA'] = my_file['Tesla'].rolling(window=14).mean()
my_file['30MA'] = my_file['Tesla'].rolling(window=30).mean()

# Remove NaN values
data = my_file.dropna().copy()

# 5. Train-Test Split
X = data[["2MA", "5MA", "14MA", "30MA", "High.Lag", "Low.Lag"]]
Y = data["Tesla"]

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=42)

# 6. Train MLP Model
mlp = MLPRegressor(hidden_layer_sizes=(64, 32), activation='relu', solver='adam', max_iter=500, random_state=42)
mlp.fit(x_train, y_train)

# 7. Short-Term Prediction
last_values = data[["2MA", "5MA", "14MA", "30MA", "High.Lag", "Low.Lag"]].iloc[-1].values.reshape(1, -1)
last_Tesla_close = data["Tesla"].iloc[-1]

predicted_close = mlp.predict(last_values)[0]

# Print Predictions
print(f"Prediction for Next Tesla Close: {predicted_close}")
print(f"Last Tesla Close: {last_Tesla_close}")

# Percentage Change
perc_change = (predicted_close / last_Tesla_close - 1) * 100
print(f"Predicted Percentage Change: {perc_change:.2f}%")

# Evaluate Model
y_pred = mlp.predict(x_test)
mse = mean_squared_error(y_test, y_pred)

print(f"Mean Squared Error: {mse}")

# 8. Plot Predicted vs Actual Close Prices
plt.figure(figsize=(10, 5))
plt.plot(y_test.index, y_test, label="Actual Close Price", color='blue')
plt.plot(y_test.index, y_pred, label="Predicted Close Price", color='red', linestyle="dashed")
plt.xlabel("Date")
plt.ylabel("Tesla Close Price")
plt.title("MLP Regression - Actual vs Predicted Tesla Close Prices")
plt.legend()
plt.show()
