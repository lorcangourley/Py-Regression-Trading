# News API

# https://pythoninvest.com/long-read/sentiment-analysis-of-financial-news
# Your API key is: 3d0c007ec2484383a2a20c4c8db1e5a5

!pip install newsapi-python

from newsapi import NewsApiClient
from datetime import date, timedelta

phrase = 'Apple stock'
newsapi = NewsApiClient(api_key='3d0c007ec2484383a2a20c4c8db1e5a5')
my_date = date.today() - timedelta(days = 30)
articles = newsapi.get_everything(q=phrase,
                                  from_param = my_date.isoformat(),
                                  language="en",
                                  sort_by="relevancy",
                                  page_size = 5)
for article in articles['articles']:
  print(article['title'] + ' | ' + article['publishedAt'] ) # + ' | ' + article['url'])

forAnal= articles['articles']
print(forAnal)

for article in articles['articles']:
    analy = article['publishedAt']
    print(analy)

from textblob import TextBlob
import matplotlib.pyplot as plt

import pandas as pd
import datetime

sent = []
published_dates = []  # Store published dates for x-axis labels
pub_title= []

for article in forAnal:
    # Assuming 'content' key holds the article text, adjust if needed
    if 'content' in article and article['content']:  # Check if 'content' key exists and has value
        blob = TextBlob(article['content'])
        senti = blob.sentiment.polarity
        print(f"Article Title: {article['title']},{article['publishedAt'][:10].replace('T','')},\n{senti}")
    else:
        print(f"Article Title: {article['title']}")
        print("No content found for sentiment analysis.")

    sent.append(senti)
    # Extract date in 'YYYY-MM-DD' format, handling potential errors
    try:
        published_date = pd.to_datetime(article['publishedAt']).strftime('%Y-%m-%d')
    except ValueError:
        print(f"Invalid date format for article: {article['title']}")
        published_date = None  # Or handle the error differently

    if published_date:
        published_dates.append(published_date)  # Collect published dates

# Create a Pandas DataFrame
df = pd.DataFrame({'Sentiment': sent, 'PublishedDate': published_dates})
# Sort the DataFrame by 'PublishedDate'
df = df.sort_values(by=['PublishedDate'])

print(df)

# Use matplotlib.pyplot to create the bar plot
plt.bar(range(len(df['Sentiment'])), df['Sentiment'])  # x-axis: article index, y-axis: sentiment
# Use published_dates for x-axis labels
plt.xticks(range(len(df['Sentiment'])), df['PublishedDate'], rotation=45, ha='right')
plt.ylabel("Sentiment Polarity")  # Label y-axis
plt.title("Sentiment Analysis of Articles")  # Add a title
plt.tight_layout()  # Adjust layout for better readability
plt.show()  # Display the plot
